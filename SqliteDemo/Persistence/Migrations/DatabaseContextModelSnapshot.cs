// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqliteDemo.Persistence;

#nullable disable

namespace SqliteDemo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("SqliteDemo.Persistence.Entities.PersistedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name")
                        .IsFixedLength(false);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("SqliteDemo.Persistence.Entities.PersistedFill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetPath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Asset")
                        .IsFixedLength(false);

                    b.Property<string>("ExchangeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ExchangeId")
                        .IsFixedLength(false);

                    b.Property<string>("ExchangeOrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ExchangeOrderId")
                        .IsFixedLength(false);

                    b.Property<string>("InstrumentPath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Instrument")
                        .IsFixedLength(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Quantity");

                    b.Property<string>("StrategyName")
                        .HasColumnType("TEXT")
                        .HasColumnName("Strategy")
                        .IsFixedLength(false);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Fills", (string)null);
                });

            modelBuilder.Entity("SqliteDemo.Persistence.Entities.PersistedStrategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetPath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Asset")
                        .IsFixedLength(false);

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("Comment")
                        .IsFixedLength(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name")
                        .IsFixedLength(false);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name", "AccountId", "AssetPath")
                        .IsUnique()
                        .HasDatabaseName("IX_StrategyUnique");

                    b.ToTable("Strategies", (string)null);
                });

            modelBuilder.Entity("SqliteDemo.Persistence.Entities.PersistedFill", b =>
                {
                    b.HasOne("SqliteDemo.Persistence.Entities.PersistedAccount", "Account")
                        .WithMany("Fills")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SqliteDemo.Persistence.Entities.PersistedStrategy", b =>
                {
                    b.HasOne("SqliteDemo.Persistence.Entities.PersistedAccount", "Account")
                        .WithMany("Strategies")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SqliteDemo.Persistence.Entities.PersistedAccount", b =>
                {
                    b.Navigation("Fills");

                    b.Navigation("Strategies");
                });
#pragma warning restore 612, 618
        }
    }
}
